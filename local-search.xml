<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>简洁明了的Vue project和inject 总结</title>
    <link href="/2021/02/23/project%E5%92%8Cinject%E7%94%A8%E6%B3%95/"/>
    <url>/2021/02/23/project%E5%92%8Cinject%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="一、概念解析"><a href="#一、概念解析" class="headerlink" title="一、概念解析"></a>一、概念解析</h4><p>成对出现：provide和inject是成对出现的<br>作用：用于父组件向子孙组件传递数据<br>使用方法：provide在父组件中返回要传给下级的数据，inject在需要使用这个数据的子辈组件或者孙辈等下级组件中注入数据。<br>使用场景：由于vue有$parent属性可以让子组件访问父组件。但孙组件想要访问祖先组件就比较困难。通过provide/inject可以轻松实现跨级访问父组件的数据</p><h4 id="二、代码演示"><a href="#二、代码演示" class="headerlink" title="二、代码演示"></a>二、代码演示</h4><p> 此为父组件内容，通过provide函数返回需要向下层组件传递的值，此处向下传递包括整个父组件对象yee以及父组件中data中的parent</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">children</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">children</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> children <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Children&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span><br>  props: &#123;<br><span class="javascript">    msg: <span class="hljs-built_in">String</span></span><br>  &#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">provide</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      parent:<span class="hljs-built_in">this</span>.parentData,</span><br><span class="javascript">      yee:<span class="hljs-built_in">this</span></span><br>  &#125;&#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      parentData:<span class="hljs-string">&#x27;Parents&#x27;</span>,</span><br><span class="javascript">      root:<span class="hljs-string">&#x27;root&#x27;</span>  </span><br>    &#125;<br>  &#125;,<br>  components:&#123;<br>    children<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 此处为子组件Children的内容<br> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">grandchild</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">grandchild</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是孙组件的注入</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">yee.root</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">import grandchild from &#x27;./Grandchild&#x27;</span><br><span class="xml">export default &#123;</span><br><span class="xml">    inject:[&#x27;yee&#x27;,&quot;parent&quot;],</span><br><span class="xml">    components:&#123;</span><br><span class="xml">        grandchild</span><br><span class="xml">    &#125;,</span><br><span class="xml">    mounted() &#123;</span><br><span class="xml">        console.log(this.yee)</span><br><span class="xml">    &#125;,</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br> 此处为孙组件Grandchild的内容<br> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这里是孙组件的注入</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">parent</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default &#123;</span><br><span class="xml">    inject:[&#x27;parent&#x27;]</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>demo演示<br><img src="/2021/02/23/project%E5%92%8Cinject%E7%94%A8%E6%B3%95/1.png"></p><style>    img {        /* width:200px; */        height:300px    }</style><h4 id="三、关于inject-和-provide的响应式原理"><a href="#三、关于inject-和-provide的响应式原理" class="headerlink" title="三、关于inject 和 provide的响应式原理"></a>三、关于inject 和 provide的响应式原理</h4><p>官方提示<br> provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的<br> 响应式实现</p><p>最顶层组件</p> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">parentData.object</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">children</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">children</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">import children from &#x27;./Children&#x27;</span><br><span class="xml">export default &#123;</span><br><span class="xml">  name: &#x27;HelloWorld&#x27;,</span><br><span class="xml">  props: &#123;</span><br><span class="xml">    msg: String</span><br><span class="xml">  &#125;,</span><br><span class="xml">  provide()&#123;</span><br><span class="xml">    return &#123;</span><br><span class="xml">      parent:this.parentData,</span><br><span class="xml">      yee:this</span><br><span class="xml">  &#125;&#125;,</span><br><span class="xml">  data() &#123;</span><br><span class="xml">    return &#123;</span><br><span class="xml">      parentData:&#123;</span><br><span class="xml">        object:&#x27;object可以实现响应式&#x27;</span><br><span class="xml">      &#125;,//</span><br><span class="xml">      root:&#x27;root&#x27;  </span><br><span class="xml">    &#125;</span><br><span class="xml">  &#125;,</span><br><span class="xml">  components:&#123;</span><br><span class="xml">    children</span><br><span class="xml">  &#125;,</span><br><span class="xml">  mounted() &#123;</span><br><span class="xml">    setTimeout(()=&gt;&#123;</span><br><span class="xml">      this.parentData.object=&quot;修改了provide的值&quot;</span><br><span class="xml">      this._provided.parent=&quot;哈哈哈&quot;</span><br><span class="xml">      console.log(this._provided)</span><br><span class="xml">      &#125;,3000)</span><br><span class="xml">  &#125;,</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p> 注入数据的孙组件<br> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这里是孙组件的注入</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">parent.object</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default &#123;</span><br><span class="xml">    inject:[&#x27;parent&#x27;]</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Axios常用操作，（包括axios的请求方式，axios如何处理并发请求及多个请求统一处理数据</title>
    <link href="/2021/02/23/Axios/"/>
    <url>/2021/02/23/Axios/</url>
    
    <content type="html"><![CDATA[<h1 id="1-axios请求方式"><a href="#1-axios请求方式" class="headerlink" title="1.axios请求方式"></a>1.axios请求方式</h1><h1 id="2-axios发生并发请求，多个请求统一一处理数据"><a href="#2-axios发生并发请求，多个请求统一一处理数据" class="headerlink" title="2.axios发生并发请求，多个请求统一一处理数据"></a>2.axios发生并发请求，多个请求统一一处理数据</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">axios</span><span class="hljs-selector-class">.all</span>([<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>:<span class="hljs-string">&quot;http://152.136.185.210/api/home&quot;</span>,<br>        <span class="hljs-attribute">method</span>:<span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;),<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>:<span class="hljs-string">&#x27;http://152.136.185.210/api/category&#x27;</span><br>        <span class="hljs-attribute">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attribute">params</span>:&#123;<br>            <span class="hljs-attribute">type</span>:<span class="hljs-string">&#x27;sell&#x27;</span>,<br>            <span class="hljs-attribute">page</span>:<span class="hljs-number">5</span>           <span class="hljs-comment">//</span><br>        &#125;<br>    &#125;)<br>])<span class="hljs-selector-class">.then</span>(res=&gt;&#123;<br>    <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(res)<br>&#125;)<span class="hljs-selector-class">.catch</span>(err=&gt;&#123;<br>    <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="3-axios常见的配置选项"><a href="#3-axios常见的配置选项" class="headerlink" title="3.axios常见的配置选项"></a>3.axios常见的配置选项</h1><h3 id="请求地址-url"><a href="#请求地址-url" class="headerlink" title="请求地址:url,"></a>请求地址:url,</h3><h3 id="请求方式-method"><a href="#请求方式-method" class="headerlink" title="请求方式:method,"></a>请求方式:method,</h3><h3 id="请求根路径-baseURL"><a href="#请求根路径-baseURL" class="headerlink" title="请求根路径:baseURL,"></a>请求根路径:baseURL,</h3><h3 id="transformRequest-请求前的数据处理"><a href="#transformRequest-请求前的数据处理" class="headerlink" title="transformRequest:请求前的数据处理"></a>transformRequest:请求前的数据处理</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vim">import qs from qs <br><br>//qs库将url中的参数转化为对象 <span class="hljs-keyword">e</span>.<span class="hljs-variable">g:qs</span>.parse(url)<br>//qs库讲对象url转为参数形式   <span class="hljs-keyword">e</span>.<span class="hljs-variable">g:qs</span>.<span class="hljs-built_in">string</span>()<br><span class="hljs-keyword">let</span> httpRequest =axios.create(&#123;<br>    baseURL:<span class="hljs-string">&#x27;&#x27;</span>,<br>    transformReques<span class="hljs-variable">t:</span>[<br>        <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(data)</span>&#123;</span><br>            //transformRequest允许在向服务器发送之前，修改数据<br>            //只能用在<span class="hljs-string">&quot;PUT&quot;</span>，<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;PATCH&quot;</span> 这几个请求方法<br>            data.sex=<span class="hljs-string">&quot;man&quot;</span><br>            <span class="hljs-keyword">return</span> qs.stringify(data)<br>        &#125;<br>    ],<br>    header:&#123;<br>        <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;<br>&#125;)<br>httpRequest.post(<span class="hljs-string">&#x27;api&#x27;</span>,<br>    &#123;<br>        age:<span class="hljs-number">15</span>,<br>        name:<span class="hljs-string">&#x27;fox&#x27;</span><br>    &#125;<br>    //最终post请求携带的参数为&#123;<br>        age:<span class="hljs-number">15</span>,<br>        name:<span class="hljs-string">&#x27;fox&#x27;</span>,<br>        sex:<span class="hljs-string">&#x27;man&#x27;</span><br>    &#125;<br>&#125;).then(<span class="hljs-keyword">res</span>=&gt;&#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>&#125;).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    console.<span class="hljs-built_in">log</span>(err)<br>&#125;)    <br></code></pre></td></tr></table></figure><h3 id="transformResponse-请求后的数据处理"><a href="#transformResponse-请求后的数据处理" class="headerlink" title="transformResponse:请求后的数据处理"></a>transformResponse:请求后的数据处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">let</span> httpResponse=axios.create(&#123;<br>    baseURL:<span class="hljs-string">&#x27;&#x27;</span>,<br>    transformResponse:[<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        data=<span class="hljs-string">&quot;自己全新的数据&quot;</span><br>        <span class="hljs-keyword">return</span> data <br>    &#125;]<br>&#125;)<br>httpResponse.post(<span class="hljs-string">&#x27;api&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res.data,<span class="hljs-string">&quot;post上传成功&quot;</span>)<span class="hljs-comment">//此时的res.data已经变为了&#x27;自己全新的数据，而非后台返回的数据&#x27;</span><br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err,<span class="hljs-string">&#x27;发生了错误&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="拦截器的使用"><a href="#拦截器的使用" class="headerlink" title="拦截器的使用"></a>拦截器的使用</h3><p>这个拦截器会在你发送请求之前运行，首先验证是否有token，如果存在则在请求头加上这个token。后台会判断这个token是否过期</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pf">// http request 拦截器<br>axios.interceptors.request.use(<br>  config =&gt; &#123;<br>    if (store.<span class="hljs-keyword">state</span>.token) &#123;<br>      config.headers.Authorization = `token $&#123;store.<span class="hljs-keyword">state</span>.token&#125;`<br>    &#125;<br>    return config<br>  &#125;,<br>  err =&gt; &#123;<br>    return Promise.reject(err)<br>  &#125;,<br>)<br></code></pre></td></tr></table></figure><p>响应拦截器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">instance<span class="hljs-selector-class">.interceptors</span><span class="hljs-selector-class">.response</span><span class="hljs-selector-class">.use</span>(<br>  response =&gt; &#123;<br>    <span class="hljs-comment">//拦截响应，做统一处理 </span><br>    <span class="hljs-keyword">if</span> (response<span class="hljs-selector-class">.data</span>.code) &#123;<br>      switch (response<span class="hljs-selector-class">.data</span>.code) &#123;<br>        case <span class="hljs-number">1002</span>:<br>          store<span class="hljs-selector-class">.state</span><span class="hljs-selector-class">.isLogin</span> = false<br>          router<span class="hljs-selector-class">.replace</span>(&#123;<br>            path: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            query: &#123;<br>              redirect: router<span class="hljs-selector-class">.currentRoute</span>.fullPath<br>            &#125;<br>          &#125;)<br>      &#125;<br>    &#125;<br>    return response<br>  &#125;,<br>  <span class="hljs-comment">//接口错误状态处理，也就是说无响应时的处理</span><br>  error =&gt; &#123;<br>    return Promise<span class="hljs-selector-class">.reject</span>(error<span class="hljs-selector-class">.response</span>.status) <span class="hljs-comment">// 返回接口返回的错误信息</span><br>  &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
