<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端开发中有关同步以及异步的相关内容</title>
    <link href="/2021/02/25/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/"/>
    <url>/2021/02/25/%E5%90%8C%E6%AD%A5%E5%BC%82%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h4 id="1-同步与异步（sync与async）"><a href="#1-同步与异步（sync与async）" class="headerlink" title="1.同步与异步（sync与async）"></a>1.同步与异步（sync与async）</h4><ul><li>同步方法调用一但开始，调用这必须等到方法调用返回后，才能继续后续的行为。</li><li>异步方法调用更像一个消息传递，一旦开始，方法调用就会立即返回，</li><li>调用者就可以继续后续的操作。而异步方法通常会在另外一个线程实地执行。整个过程，不会阻碍调用者工作。</li></ul><h4 id="2-阻塞与非阻塞"><a href="#2-阻塞与非阻塞" class="headerlink" title="2.阻塞与非阻塞"></a>2.阻塞与非阻塞</h4><ul><li>阻塞强调的是程序等待调用结果（消息，返回值）时的状态。阻塞是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回。</li><li>非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程。对于同步调用来说，很多时候当前线程还是激活状态，只是从逻辑上当前函数没有返回，即同步等待时什么都不干，白白占着资源。</li></ul><h4 id="3-Promise"><a href="#3-Promise" class="headerlink" title="3.Promise"></a>3.Promise</h4><h5 id="promise描述"><a href="#promise描述" class="headerlink" title="promise描述"></a>promise描述</h5><p>一个 Promise 对象代表一个在这个 promise 被创建出来时不一定已知的值。它让您能够把异步操作最终的成功返回值或者失败原因和相应的处理程序关联起来。 这样使得异步方法可以像同步方法那样返回值：异步方法并不会立即返回最终的值，而是会返回一个 promise，以便在未来某个时候把值交给使用者。</p><h5 id="promise作用"><a href="#promise作用" class="headerlink" title="promise作用"></a>promise作用</h5><ul><li>主要用于异步计算</li><li>可以将异步操作队列化，按照期望的顺序执行，返回符合预期的结果</li><li>可以在对象之间传递和操作promise，帮助我们处理队列<br>注：then中data值，是reslove中的返回值 </li></ul><h4 id="promise详解"><a href="#promise详解" class="headerlink" title="promise详解"></a>promise详解</h4><h5 id="promise三种状态"><a href="#promise三种状态" class="headerlink" title="promise三种状态"></a>promise三种状态</h5><ul><li>pending[待定]初始状态</li><li>fulfilled[实现]操作成功</li><li>reject[被否决]操作失败</li></ul><p>当promise状态发生改变，就会触发then()里面的响应函数处理后续步骤；<br>promise状态一经改变，不会再变</p><h5 id="promise状态一经改变，只有两种可能；"><a href="#promise状态一经改变，只有两种可能；" class="headerlink" title="promise状态一经改变，只有两种可能；"></a>promise状态一经改变，只有两种可能；</h5><ul><li><p>从pending变为fulfilled</p></li><li><p>从pending变为rejected<br>这两种情况只要发生，状态就凝固了，不会再有了</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>最简单示例</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,reject)</span>=&gt;</span>&#123;<br><span class="hljs-regexp">//</span>一段耗时的异步操作<br>reslove(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(res)</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(res)<br>&#125;,<br>(err)=&gt;&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;失败&#x27;</span>)<br>&#125;<br>)<br></code></pre></td></tr></table></figure><p>分为两次顺序执行</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,reject)</span>=&gt;</span>&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>reslove(<span class="hljs-string">&quot;第一次promise&quot;</span>)<br>&#125;,<span class="hljs-number">3000</span>)<br>&#125;).<span class="hljs-keyword">then</span>(val=&gt;&#123;<br><span class="hljs-built_in">console</span>.log(val) //val为“第一次promise”<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,reject)</span>=&gt;</span>&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>reslove(<span class="hljs-string">&#x27;第二次promise&#x27;</span>)<br>&#125;,<span class="hljs-number">2000</span>)<br>&#125;).<span class="hljs-keyword">then</span>(val=&gt;&#123;<br><span class="hljs-built_in">console</span>.log(val) <span class="hljs-regexp">//</span>参数val=“第二次promise”<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>promise完成后then</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">let pro =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,reject)</span>=&gt;</span>&#123;<br>    reslove(<span class="hljs-string">&quot;promise示例&quot;</span>)<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;异步操作&quot;</span>)<br>    pro.<span class="hljs-keyword">then</span>(val=&gt;&#123;<br>        <span class="hljs-built_in">console</span>.log(val)<br>    &#125;)<br>&#125;,<span class="hljs-number">2000</span>)<br></code></pre></td></tr></table></figure><p>结论:promise作为队列最为重要的特性，我们在任何一个地方生成了一个promise队列之后，我们可以把他作为一个变量传递到其他地方。</p><h5 id="假如在-then-的函数里面不返回新的promise，会怎样？"><a href="#假如在-then-的函数里面不返回新的promise，会怎样？" class="headerlink" title="假如在.then()的函数里面不返回新的promise，会怎样？"></a>假如在.then()的函数里面不返回新的promise，会怎样？</h5></li><li><p>接收两个函数为参数,分别代表fulfilled(成功)和reject(失败)</p></li><li><p>.then()返回一个新的promise实例，所以它可以链式调用</p></li><li><p>当前面的Promise状态改变时，.then()根据其最终状态，选择特定的状态响应函数执行</p></li><li><p>状态响应函数可以返回新的promise，或其他值，不返回值也可以我们可以认为它返回了一个null</p></li><li><p>如果返回新的promise，那么下一级.then()会在新的promise状态改变之后执行</p></li><li><p>如果返回其他任何值，则会立即执行下一级.then()</p></li></ul><h5 id="then-里面有-then-的情况"><a href="#then-里面有-then-的情况" class="headerlink" title=".then()里面有.then()的情况"></a>.then()里面有.then()的情况</h5><ul><li><p>因为.then()返回的还是Promise实例</p></li><li><p>会等里面的then()执行完，再执行外面的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove,reject</span>)=&gt;</span>&#123;<br>    reslove(<span class="hljs-string">&quot;hahah&quot;</span>)<br>&#125;).then(<span class="hljs-function"><span class="hljs-params">val</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(val)<span class="hljs-comment">//hahah</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;lll&quot;</span><br>&#125;).then(<span class="hljs-function"><span class="hljs-params">val</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(val)<span class="hljs-comment">//111</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h5><p>Promise会自动捕获内部异常，并交给rejected响应函数处理</p></li><li><p>第一种错误处理</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;异常抛出啦&quot;</span>)<br>    &#125;,<span class="hljs-number">2000</span>)<br>&#125;).<span class="hljs-keyword">then</span>(val=&gt;&#123;<br>    <span class="hljs-built_in">console</span>.log(val)<br>&#125;).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>第二种错误处理</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,reject)</span>=&gt;</span>&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>reject(<span class="hljs-string">&quot;bye&quot;</span>)<br>&#125;,<span class="hljs-number">2000</span>)<br>&#125;).<span class="hljs-keyword">then</span>(val=&gt;&#123;<br><span class="hljs-built_in">console</span>.log(val)<br>&#125;,<span class="hljs-function"><span class="hljs-params">(err)</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>错误处理两种方法<br>第一种：reject(‘错误信息’).then(()=&gt;{},()=&gt;{错误处理逻辑})<br>第二种：throw new Error(‘错误信息’).catch(()=&gt;{错误处理逻辑})<br>推荐使用第二种方式，更加清晰好读，并且可以捕获前面所有的错误(可以捕获N个then的回调函数)</p></li><li><p>catch() + then()<br>第一种情况</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(reslove=&gt;&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        reslove()<br>    &#125;,<span class="hljs-number">2000</span>)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;错误一&quot;</span>)<br>&#125;).<span class="hljs-keyword">then</span>(<br>    ()=&gt;&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;i am arrive here&quot;</span>)<br>    &#125;<br>).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;这里进行了捕获,&quot;</span>err)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;dada&quot;</span>)<br>&#125;).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;这里我并不能进行捕获&quot;</span>,err)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;i&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>结论:catch也会返回一个promise实例，并且是resolved状态<br>第二种情况</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,reject)</span>=&gt;</span>&#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>reslove()<br>&#125;,<span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;start&#x27;</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;test err&quot;</span>)<br>&#125;).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;i catch&quot;</span>,err)<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;another err&quot;</span>)<br>&#125;).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;arrive&quot;</span>)  <span class="hljs-regexp">//</span>这里不会答应出来<br>&#125;).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>结论：抛出错误变为rejected状态，所以绕过两个then直接跑到最下面的catch</p><h5 id="Promise-all-批量执行"><a href="#Promise-all-批量执行" class="headerlink" title="Promise.all()批量执行"></a>Promise.all()批量执行</h5><p>Promise.all([p1, p2, p3])用于将多个promise实例，包装成一个新的Promise实例，返回的实例就是普通的promise<br>它接收一个数组作为参数<br>数组里可以是Promise对象，也可以是别的值，只有Promise会等待状态改变<br>当所有的子Promise都完成，该Promise完成，返回值是全部值得数组<br>有任何一个失败，该Promise失败，返回值是第一个失败的子Promise结果</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">let first =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,reject)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        reslove(<span class="hljs-string">&quot;第一个promise&quot;</span>)<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;)<br>let second= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,rejece)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        reslove(<span class="hljs-string">&quot;第二个promise&quot;</span>)<br>    &#125;,<span class="hljs-number">3000</span>)<br>&#125;)<br><span class="hljs-built_in">Promise</span>.all([first,second]).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(res)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res)<span class="hljs-regexp">//</span>[<span class="hljs-string">&#x27;第一个promise&#x27;</span>，’第二个promise‘]<br>&#125;).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="Promise-race-类似于Promise-all-，区别在于它有任意一个完成就算完成"><a href="#Promise-race-类似于Promise-all-，区别在于它有任意一个完成就算完成" class="headerlink" title="Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成"></a>Promise.race() 类似于Promise.all() ，区别在于它有任意一个完成就算完成</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">let first =<span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,reject)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        reslove(<span class="hljs-string">&quot;第一个promise&quot;</span>)<br>    &#125;,<span class="hljs-number">1000</span>)<br>&#125;)<br>let second= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove,rejece)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        reslove(<span class="hljs-string">&quot;第二个promise&quot;</span>)<br>    &#125;,<span class="hljs-number">3000</span>)<br>&#125;)<br><span class="hljs-built_in">Promise</span>.race([first,second]).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(res)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res)<span class="hljs-regexp">//</span>第一个promise<br>&#125;).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    <span class="hljs-built_in">console</span>.log(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h4><h5 id="async函数返回一个Promise对象"><a href="#async函数返回一个Promise对象" class="headerlink" title="async函数返回一个Promise对象"></a>async函数返回一个Promise对象</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;helloASync&quot;</span><br>&#125;<br><span class="hljs-built_in">console</span>.log(helloAsync())<span class="hljs-comment">//Promise&#123;&lt;resolved&gt;:&quot;helloAsync&quot;&#125;</span><br>helloAsync().then(<span class="hljs-function"><span class="hljs-params">val</span>=&gt;</span>&#123;<br><span class="hljs-built_in">console</span>.log(val) <span class="hljs-comment">//val 为异步函数返回值</span><br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="2-async-函数中可能会有-await-表达式，async-函数执行时，如果遇到-await-就会先暂停执行-，等到触发的异步操作完成后，恢复-async-函数的执行并返回解析值。"><a href="#2-async-函数中可能会有-await-表达式，async-函数执行时，如果遇到-await-就会先暂停执行-，等到触发的异步操作完成后，恢复-async-函数的执行并返回解析值。" class="headerlink" title="2.async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。"></a>2.async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。</h5><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">let t1= <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">(reslove)</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;testAwait&quot;</span>)<br>        reslove(<span class="hljs-string">&quot;promise返回的数据&quot;</span>)<br>    &#125;,<span class="hljs-number">5000</span>)<br>&#125;)<br><span class="hljs-keyword">async</span> function asynchello()&#123;<br>    <span class="hljs-keyword">await</span> t1.<span class="hljs-keyword">then</span>(res=&gt;&#123;<br>        <span class="hljs-built_in">console</span>.log(res)<br>    &#125;)<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;await 之后再执行的函数&quot;</span>)<br>    &#125;,<span class="hljs-number">5000</span>)<br>&#125;<br>asynchello()<br></code></pre></td></tr></table></figure><h5 id="await针对跟不同表达式的处理方式："><a href="#await针对跟不同表达式的处理方式：" class="headerlink" title="await针对跟不同表达式的处理方式："></a>await针对跟不同表达式的处理方式：</h5></li><li><p>Promise对象：await会暂停执行，等待Promise对象resolve，然后恢复async函数的执行并返回解析值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAwait</span>(<span class="hljs-params">x</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">reslove</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        reslove(<span class="hljs-string">&quot;promise返回&quot;</span>)<br>    &#125;,<span class="hljs-number">2000</span>)<br>&#125;)<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">helloAsync</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">var</span> x =<span class="hljs-keyword">await</span> testAwait(<span class="hljs-string">&quot;hello&quot;</span>)<br>    <span class="hljs-built_in">console</span>.log(x) <span class="hljs-comment">//hello </span><br>&#125;<br>helloAsync()<br></code></pre></td></tr></table></figure><h5 id="非promise直接返回值"><a href="#非promise直接返回值" class="headerlink" title="非promise直接返回值"></a>非promise直接返回值</h5></li></ul><!-- 2.promise异步操作使用（步骤）    i. 保存状态信息    ii. 执行传入的回调函数时resolve，reject（resolve，reject本身又是函数）3.promise三种状态     i. Pending    ii. Fufiled    iii. Rejectedasync和await    1.async函数返回一个Promise对象，可以使用then方法添加回调函数    •     • 2.async 函数中可能会有 await 表达式，async 函数执行时，如果遇到 await 就会先暂停执行 ，等到触发的异步操作完成后，恢复 async 函数的执行并返回解析值。    •     • 3.await针对跟不同表达式的处理方式：        ○ Promise对象：await会暂停执行，等待Promise对象resolve，然后恢复async函数的执行并返回解析值        ○         ○ 非Promise对象：直接返回对应的值        ○     • 4.代码示范            •     •  -->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mixin混入</title>
    <link href="/2021/02/25/mixin/"/>
    <url>/2021/02/25/mixin/</url>
    
    <content type="html"><![CDATA[<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>混入 (mixin) 提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。一个混入对象可以包含任意组件选项。当组件使用混入对象时，所有混入对象的选项将被“混合”进入该组件本身的选项</p><h4 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h4><p>混入的组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;vue&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">            InjectData:<span class="hljs-string">&quot;注入的数据&quot;</span>,</span><br><span class="javascript">            otherData:<span class="hljs-string">&quot;其他数据&quot;</span></span><br>        &#125;<br>    &#125;,<br>    methods: &#123;<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">InjectMethod</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;mixin方法&quot;</span>)</span><br>        &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">MethodSame</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;相同的方法--mixin方法&quot;</span>)</span><br>        &#125;<br>    &#125;,<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">created</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;mixin生命周期--create&quot;</span>)</span><br>    &#125;,<br><span class="javascript">    <span class="hljs-function"><span class="hljs-title">mounted</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;mixin生命周期--mounted&quot;</span>)</span><br>    &#125;,<br>&#125;<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>组件</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        </span><span class="hljs-template-variable">&#123;&#123;InjectData&#125;</span><span class="xml">&#125;</span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">import InjectComponent from &#x27;./InjectComponent&#x27;</span><br><span class="xml">export default </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    mixins:[InjectComponent],</span><br><span class="hljs-template-variable">    created()&#123;</span><br><span class="hljs-template-variable">        console.log(&quot;组件生命周期--created&quot;)</span><br><span class="hljs-template-variable">    &#125;</span><span class="xml">,</span><br><span class="xml">    data()</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        return &#123;</span><br><span class="hljs-template-variable">            InjectData:&#x27;组件数据&#x27;</span><br><span class="hljs-template-variable">        &#125;</span><br><span class="xml">    &#125;</span><br><span class="xml">    mounted() </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        console.log(&quot;组件生命周期--mouted&quot;)</span><br><span class="hljs-template-variable">        this.InjectMethod()</span><br><span class="hljs-template-variable">        this.Method()</span><br><span class="hljs-template-variable">        this.MethodSame()</span><br><span class="hljs-template-variable">    &#125;</span><span class="xml">,</span><br><span class="xml">    methods: </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">        Method()&#123;</span><br><span class="hljs-template-variable">            console.log(&quot;组件方法&quot;)</span><br><span class="hljs-template-variable">        &#125;</span><span class="xml">,</span><br><span class="xml">        MethodSame()</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">            console.log(&quot;相同的组件方法--组件”)</span><br><span class="hljs-template-variable">        &#125;</span><br><span class="xml">    &#125;,</span><br><span class="xml">    </span><br><span class="xml">&#125;</span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><h5 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h5><p>当组件和混入对象含有同名选项时，这些选项以恰当的方式进行“合并”。比如，</p><ol><li>数据对象在内部会进行递归合并，并在发生冲突时以组件数据优先<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">示例中，注入InjectCompoent 之后 this.data<span class="hljs-regexp">//</span>&#123;InjectData:<span class="hljs-string">&#x27;组件数据&#x27;</span>,otherData:<span class="hljs-string">&quot;其他数据&quot;</span>&#125;<br>InjectData被进行了递归合并，以组件数据优先<br><br></code></pre></td></tr></table></figure></li><li>同名钩子函数将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用</li></ol><img src="/2021/02/25/mixin/1.png"><ol start="3"><li>值为对象的选项时，例如methods、components和directives,将被合并为同一个对象。两个对象键名冲突时，取组件对象的简直对。<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">示例中，注入组件中的方法包括InjectMethod、 MethodSame，<br>原有组件中的方法包括<span class="hljs-function"><span class="hljs-keyword">Method</span>、<span class="hljs-title">MethodSame</span>，</span><br><span class="hljs-function">合并之后，组件之中所包含的方法包括<span class="hljs-title">InjectMethod</span>、 <span class="hljs-title">MethodSame</span>、<span class="hljs-title">Method</span></span><br></code></pre></td></tr></table></figure></li></ol><h5 id="全局混入"><a href="#全局混入" class="headerlink" title="全局混入"></a>全局混入</h5><p>混入也可以进行全局注册。使用时格外小心！一旦使用全局混入，它将影响每一个之后创建的 Vue 实例。使用恰当时，这可以用来为自定义选项注入处理逻辑。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Vue.mixin(&#123;<br>  created: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> myOption = <span class="hljs-built_in">this</span>.$options.myOption<br>    <span class="hljs-keyword">if</span> (myOption) &#123;<br>      <span class="hljs-built_in">console</span>.log(myOption)<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  myOption: <span class="hljs-string">&#x27;hello!&#x27;</span><br>&#125;)<br><span class="hljs-comment">// =&gt; &quot;hello!&quot;</span><br></code></pre></td></tr></table></figure><h5 id="自定义合并策略"><a href="#自定义合并策略" class="headerlink" title="自定义合并策略"></a>自定义合并策略</h5>]]></content>
    
    
    <categories>
      
      <category>VUE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>简洁明了的Vue project和inject 总结</title>
    <link href="/2021/02/23/project%E5%92%8Cinject%E7%94%A8%E6%B3%95/"/>
    <url>/2021/02/23/project%E5%92%8Cinject%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="一、概念解析"><a href="#一、概念解析" class="headerlink" title="一、概念解析"></a>一、概念解析</h4><p>成对出现：provide和inject是成对出现的<br>作用：用于父组件向子孙组件传递数据<br>使用方法：provide在父组件中返回要传给下级的数据，inject在需要使用这个数据的子辈组件或者孙辈等下级组件中注入数据。<br>使用场景：由于vue有$parent属性可以让子组件访问父组件。但孙组件想要访问祖先组件就比较困难。通过provide/inject可以轻松实现跨级访问父组件的数据</p><h4 id="二、代码演示"><a href="#二、代码演示" class="headerlink" title="二、代码演示"></a>二、代码演示</h4><p> 此为父组件内容，通过provide函数返回需要向下层组件传递的值，此处向下传递包括整个父组件对象yee以及父组件中data中的parent</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">children</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">children</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> children <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Children&#x27;</span></span><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span><br>  props: &#123;<br><span class="javascript">    msg: <span class="hljs-built_in">String</span></span><br>  &#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">provide</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      parent:<span class="hljs-built_in">this</span>.parentData,</span><br><span class="javascript">      yee:<span class="hljs-built_in">this</span></span><br>  &#125;&#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="javascript">      parentData:<span class="hljs-string">&#x27;Parents&#x27;</span>,</span><br><span class="javascript">      root:<span class="hljs-string">&#x27;root&#x27;</span>  </span><br>    &#125;<br>  &#125;,<br>  components:&#123;<br>    children<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 此处为子组件Children的内容<br> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">grandchild</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">grandchild</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是孙组件的注入</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">yee.root</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">import grandchild from &#x27;./Grandchild&#x27;</span><br><span class="xml">export default &#123;</span><br><span class="xml">    inject:[&#x27;yee&#x27;,&quot;parent&quot;],</span><br><span class="xml">    components:&#123;</span><br><span class="xml">        grandchild</span><br><span class="xml">    &#125;,</span><br><span class="xml">    mounted() &#123;</span><br><span class="xml">        console.log(this.yee)</span><br><span class="xml">    &#125;,</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br> 此处为孙组件Grandchild的内容<br> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这里是孙组件的注入</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">parent</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default &#123;</span><br><span class="xml">    inject:[&#x27;parent&#x27;]</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br>demo演示<br><img src="/2021/02/23/project%E5%92%8Cinject%E7%94%A8%E6%B3%95/1.png"></p><style>    img {        /* width:200px; */        height:300px    }</style><h4 id="三、关于inject-和-provide的响应式原理"><a href="#三、关于inject-和-provide的响应式原理" class="headerlink" title="三、关于inject 和 provide的响应式原理"></a>三、关于inject 和 provide的响应式原理</h4><p>官方提示<br> provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的<br> 响应式实现</p><p>最顶层组件</p> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"> <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">parentData.object</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">children</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">children</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">import children from &#x27;./Children&#x27;</span><br><span class="xml">export default &#123;</span><br><span class="xml">  name: &#x27;HelloWorld&#x27;,</span><br><span class="xml">  props: &#123;</span><br><span class="xml">    msg: String</span><br><span class="xml">  &#125;,</span><br><span class="xml">  provide()&#123;</span><br><span class="xml">    return &#123;</span><br><span class="xml">      parent:this.parentData,</span><br><span class="xml">      yee:this</span><br><span class="xml">  &#125;&#125;,</span><br><span class="xml">  data() &#123;</span><br><span class="xml">    return &#123;</span><br><span class="xml">      parentData:&#123;</span><br><span class="xml">        object:&#x27;object可以实现响应式&#x27;</span><br><span class="xml">      &#125;,//</span><br><span class="xml">      root:&#x27;root&#x27;  </span><br><span class="xml">    &#125;</span><br><span class="xml">  &#125;,</span><br><span class="xml">  components:&#123;</span><br><span class="xml">    children</span><br><span class="xml">  &#125;,</span><br><span class="xml">  mounted() &#123;</span><br><span class="xml">    setTimeout(()=&gt;&#123;</span><br><span class="xml">      this.parentData.object=&quot;修改了provide的值&quot;</span><br><span class="xml">      this._provided.parent=&quot;哈哈哈&quot;</span><br><span class="xml">      console.log(this._provided)</span><br><span class="xml">      &#125;,3000)</span><br><span class="xml">  &#125;,</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p> 注入数据的孙组件<br> <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">  <span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>这里是孙组件的注入</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">parent.object</span>&#125;&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span></span><br><span class="xml">export default &#123;</span><br><span class="xml">    inject:[&#x27;parent&#x27;]</span><br><span class="xml">&#125;</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>VUE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Axios常用操作，（包括axios的请求方式，axios如何处理并发请求及多个请求统一处理数据</title>
    <link href="/2021/02/23/Axios/"/>
    <url>/2021/02/23/Axios/</url>
    
    <content type="html"><![CDATA[<h1 id="1-axios请求方式"><a href="#1-axios请求方式" class="headerlink" title="1.axios请求方式"></a>1.axios请求方式</h1><h1 id="2-axios发生并发请求，多个请求统一一处理数据"><a href="#2-axios发生并发请求，多个请求统一一处理数据" class="headerlink" title="2.axios发生并发请求，多个请求统一一处理数据"></a>2.axios发生并发请求，多个请求统一一处理数据</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">axios</span><span class="hljs-selector-class">.all</span>([<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>:<span class="hljs-string">&quot;http://152.136.185.210/api/home&quot;</span>,<br>        <span class="hljs-attribute">method</span>:<span class="hljs-string">&#x27;get&#x27;</span><br>    &#125;),<br>    axios(&#123;<br>        <span class="hljs-attribute">url</span>:<span class="hljs-string">&#x27;http://152.136.185.210/api/category&#x27;</span><br>        <span class="hljs-attribute">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>        <span class="hljs-attribute">params</span>:&#123;<br>            <span class="hljs-attribute">type</span>:<span class="hljs-string">&#x27;sell&#x27;</span>,<br>            <span class="hljs-attribute">page</span>:<span class="hljs-number">5</span>           <span class="hljs-comment">//</span><br>        &#125;<br>    &#125;)<br>])<span class="hljs-selector-class">.then</span>(res=&gt;&#123;<br>    <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(res)<br>&#125;)<span class="hljs-selector-class">.catch</span>(err=&gt;&#123;<br>    <span class="hljs-selector-tag">console</span><span class="hljs-selector-class">.log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="3-axios常见的配置选项"><a href="#3-axios常见的配置选项" class="headerlink" title="3.axios常见的配置选项"></a>3.axios常见的配置选项</h1><h3 id="请求地址-url"><a href="#请求地址-url" class="headerlink" title="请求地址:url,"></a>请求地址:url,</h3><h3 id="请求方式-method"><a href="#请求方式-method" class="headerlink" title="请求方式:method,"></a>请求方式:method,</h3><h3 id="请求根路径-baseURL"><a href="#请求根路径-baseURL" class="headerlink" title="请求根路径:baseURL,"></a>请求根路径:baseURL,</h3><h3 id="transformRequest-请求前的数据处理"><a href="#transformRequest-请求前的数据处理" class="headerlink" title="transformRequest:请求前的数据处理"></a>transformRequest:请求前的数据处理</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs vim">import qs from qs <br><br>//qs库将url中的参数转化为对象 <span class="hljs-keyword">e</span>.<span class="hljs-variable">g:qs</span>.parse(url)<br>//qs库讲对象url转为参数形式   <span class="hljs-keyword">e</span>.<span class="hljs-variable">g:qs</span>.<span class="hljs-built_in">string</span>()<br><span class="hljs-keyword">let</span> httpRequest =axios.create(&#123;<br>    baseURL:<span class="hljs-string">&#x27;&#x27;</span>,<br>    transformReques<span class="hljs-variable">t:</span>[<br>        <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(data)</span>&#123;</span><br>            //transformRequest允许在向服务器发送之前，修改数据<br>            //只能用在<span class="hljs-string">&quot;PUT&quot;</span>，<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-string">&quot;PATCH&quot;</span> 这几个请求方法<br>            data.sex=<span class="hljs-string">&quot;man&quot;</span><br>            <span class="hljs-keyword">return</span> qs.stringify(data)<br>        &#125;<br>    ],<br>    header:&#123;<br>        <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br>    &#125;<br>&#125;)<br>httpRequest.post(<span class="hljs-string">&#x27;api&#x27;</span>,<br>    &#123;<br>        age:<span class="hljs-number">15</span>,<br>        name:<span class="hljs-string">&#x27;fox&#x27;</span><br>    &#125;<br>    //最终post请求携带的参数为&#123;<br>        age:<span class="hljs-number">15</span>,<br>        name:<span class="hljs-string">&#x27;fox&#x27;</span>,<br>        sex:<span class="hljs-string">&#x27;man&#x27;</span><br>    &#125;<br>&#125;).then(<span class="hljs-keyword">res</span>=&gt;&#123;<br>    console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">res</span>)<br>&#125;).<span class="hljs-keyword">catch</span>(err=&gt;&#123;<br>    console.<span class="hljs-built_in">log</span>(err)<br>&#125;)    <br></code></pre></td></tr></table></figure><h3 id="transformResponse-请求后的数据处理"><a href="#transformResponse-请求后的数据处理" class="headerlink" title="transformResponse:请求后的数据处理"></a>transformResponse:请求后的数据处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">let</span> httpResponse=axios.create(&#123;<br>    baseURL:<span class="hljs-string">&#x27;&#x27;</span>,<br>    transformResponse:[<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>        data=<span class="hljs-string">&quot;自己全新的数据&quot;</span><br>        <span class="hljs-keyword">return</span> data <br>    &#125;]<br>&#125;)<br>httpResponse.post(<span class="hljs-string">&#x27;api&#x27;</span>).then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(res.data,<span class="hljs-string">&quot;post上传成功&quot;</span>)<span class="hljs-comment">//此时的res.data已经变为了&#x27;自己全新的数据，而非后台返回的数据&#x27;</span><br>&#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(err,<span class="hljs-string">&#x27;发生了错误&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="拦截器的使用"><a href="#拦截器的使用" class="headerlink" title="拦截器的使用"></a>拦截器的使用</h3><p>这个拦截器会在你发送请求之前运行，首先验证是否有token，如果存在则在请求头加上这个token。后台会判断这个token是否过期</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs pf">// http request 拦截器<br>axios.interceptors.request.use(<br>  config =&gt; &#123;<br>    if (store.<span class="hljs-keyword">state</span>.token) &#123;<br>      config.headers.Authorization = `token $&#123;store.<span class="hljs-keyword">state</span>.token&#125;`<br>    &#125;<br>    return config<br>  &#125;,<br>  err =&gt; &#123;<br>    return Promise.reject(err)<br>  &#125;,<br>)<br></code></pre></td></tr></table></figure><p>响应拦截器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">instance<span class="hljs-selector-class">.interceptors</span><span class="hljs-selector-class">.response</span><span class="hljs-selector-class">.use</span>(<br>  response =&gt; &#123;<br>    <span class="hljs-comment">//拦截响应，做统一处理 </span><br>    <span class="hljs-keyword">if</span> (response<span class="hljs-selector-class">.data</span>.code) &#123;<br>      switch (response<span class="hljs-selector-class">.data</span>.code) &#123;<br>        case <span class="hljs-number">1002</span>:<br>          store<span class="hljs-selector-class">.state</span><span class="hljs-selector-class">.isLogin</span> = false<br>          router<span class="hljs-selector-class">.replace</span>(&#123;<br>            path: <span class="hljs-string">&#x27;login&#x27;</span>,<br>            query: &#123;<br>              redirect: router<span class="hljs-selector-class">.currentRoute</span>.fullPath<br>            &#125;<br>          &#125;)<br>      &#125;<br>    &#125;<br>    return response<br>  &#125;,<br>  <span class="hljs-comment">//接口错误状态处理，也就是说无响应时的处理</span><br>  error =&gt; &#123;<br>    return Promise<span class="hljs-selector-class">.reject</span>(error<span class="hljs-selector-class">.response</span>.status) <span class="hljs-comment">// 返回接口返回的错误信息</span><br>  &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>VUE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
